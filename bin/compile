#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x            # debug every command
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
CLI_PATH="/tmp/cli"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source <(curl -s --retry 3 https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh)

### Execute
header 'Welcome to salesforce-dx-buildpack!'
update "Exporting environment directories ..."
export_env "$ENV_DIR"

update "Setting up paths ..."

update "-- BUILD_DIR" $BUILD_DIR
update "-- CACHE_DIR" $CACHE_DIR
update "-- ENV_DIR" $ENV_DIR

setup_dirs "$BUILD_DIR"

update "Updating CLI ..."
sfdx update &>/dev/null
update "-- Completed 'sfdx update'"
SFDX_VERSION=$(sfdx version)
update "-- sfdx version: " $SFDX_VERSION
SFDX_PLUGINS=$(sfdx plugins --core)
update "-- Plugins: " $SFDX_PLUGINS

update "Config vars ..."
update "-- DEV_HUB_SFDX_AUTH_URL: $DEV_HUB_SFDX_AUTH_URL"
update "-- STAGE: $STAGE"
update "-- SFDX_AUTH_URL: $SFDX_AUTH_URL"

whoami=$(whoami)
update "-- WHOAMI: $whoami"

# Go to BUILD_DIR
cd $BUILD_DIR

update "Parse .salesforcex.yml values ..."

# Parse .salesforcedx.yml file into env
#BUG: not parsing arrays properly
eval $(parse_yaml .salesforcedx.yml)

update "-- scratch-org-def: $scratch_org_def"
update "-- assign-permset: $assign_permset"
update "-- permset-name: $permset_name"
update "-- run-apex-tests: $run_apex_tests"
update "-- apex-test-format: $apex_test_format"
update "-- delete-scratch-org: $delete_scratch_org"
update "-- open-path: $open_path"
update "-- data-plans: $data_plans"

### Staging and Prod

if [ "$STAGE" == "STAGING" ] || [ "$STAGE" == "PROD" ]; then

  update "Running on $STAGE ..."
  
  auth $BUILD_DIR $SFDX_AUTH_URL s targetorg

  sfdx force:source:convert -d mdapiout

  sfdx force:mdapi:deploy -d mdapiout --wait 1000 -u targetorg

  # Run tests
  tests $run_apex_tests $apex_test_format targetorg

fi

### Review app

if [ "$STAGE" == "" ] || [ "$STAGE" == "DEV" ; then
  update "Running as a REVIEW APP ..."

  # Authenticate to Dev Hub
  auth $BUILD_DIR $DEV_HUB_SFDX_AUTH_URL d huborg

  # Create scratch org
  sfdx force:org:create -s -f $scratch_org_def -a targetorg

  # Push source
  sfdx force:source:push -u targetorg

  # Run tests
  tests $run_apex_tests $apex_test_format targetorg

  # Delete scratch org
  if [ "$delete_scratch_org" == "true" ]; then
    sfdx force:org:delete -p
  fi
fi

### Procfile & Release Phase

# if no Procfile, create one
if [ ! -f $BUILD_DIR/Procfile ]; then
  update "Creating Profile ..."
  echo "# Deploy source to production org.
release: ./release.sh
# Redirect all Heroku app domain requests to org.
# Defaults to /one/one.app, configurable via open-path var in .salesforcedx.yml.
# web: .salesforce/node/bin/node .salesforce/force.js redirect" > $BUILD_DIR/Procfile

  update "-- Generated Procfile that will deploy source in release phase and redirect to open-path in web phase"
fi

# copy scripts needed for release phase
update "Copying release.sh to $BUILD_DIR/release.sh ..."
cp $BP_DIR/lib/release.sh $BUILD_DIR/
update "Copying common.sh to $BUILD_DIR/common.sh ..."
cp $BP_DIR/lib/common.sh $BUILD_DIR/
update "Copying sfdx.sh to $BUILD_DIR/sfdx.sh ..."
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0