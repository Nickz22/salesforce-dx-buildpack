#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# set defaults for optional config vars
: ${SFDX_BUILDPACK_DEBUG:="false"}

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source $BP_DIR/lib/stdlib.sh

### Execute
header 'Welcome to salesforce-dx-buildpack!'
log "Exporting environment directories ..."
export_env "$ENV_DIR"

# Setup local paths
log "Setting up paths ..."

debug "BUILD_DIR: $BUILD_DIR"
debug "CACHE_DIR: $CACHE_DIR"
debug "ENV_DIR: $ENV_DIR" 
debug "BP_DIR: $BP_DIR"

setup_dirs "$BUILD_DIR"

# CLI details
SFDX_VERSION=$(sfdx version)
debug "sfdx version: $SFDX_VERSION"
SFDX_PLUGINS=$(sfdx plugins --core)
debug "Plugins: $SFDX_PLUGINS"

# Log config
debug "DEV_HUB_SFDX_AUTH_URL: $DEV_HUB_SFDX_AUTH_URL"
debug "STAGE: $STAGE"
debug "SFDX_AUTH_URL: $SFDX_AUTH_URL"
debug "SFDX_BUILDPACK_DEBUG : $SFDX_BUILDPACK_DEBUG"

whoami=$(whoami)
debug "WHOAMI: $whoami"

# Go to BUILD_DIR
cd $BUILD_DIR

log "Parse .salesforcex.yml values ..."

# Parse .salesforcedx.yml file into env
#BUG: not parsing arrays properly
eval $(parse_yaml .salesforcedx.yml)

debug "scratch-org-def: $scratch_org_def"
debug "assign-permset: $assign_permset"
debug "permset-name: $permset_name"
debug "run-apex-tests: $run_apex_tests"
debug "apex-test-format: $apex_test_format"
debug "delete-scratch-org: $delete_scratch_org"
debug "show-scratch-org-url: $show_scratch_org_url"
debug "open-path: $open_path"
debug "data-plans: $data_plans"

### Staging and Prod

if [ "$STAGE" == "DEV" ] || [ "$STAGE" == "STAGING" ] || [ "$STAGE" == "PROD" ]; then

  log "Running on $STAGE ..."
  
  auth $BUILD_DIR $SFDX_AUTH_URL s targetorg

  sfdx force:source:convert -d mdapiout

  sfdx force:mdapi:deploy -d mdapiout --wait 1000 -u targetorg

fi

### Review app

if [ "$STAGE" == "" ]; then
  log "Running as a REVIEW APP ..."

  # Authenticate to Dev Hub
  auth $BUILD_DIR $DEV_HUB_SFDX_AUTH_URL d huborg

  # Create scratch org
  sfdx force:org:create -s -f $scratch_org_def -a targetorg

  # Push source
  sfdx force:source:push -u targetorg

  # Show scratch org URL
  if [ "$show_scratch_org_url" == "true" ]; then
    if [ ! "$open_path" == "" ]; then
      sfdx force:org:open -r -p $open_path
    fi
    if [ "$open_path" == "" ]; then
      sfdx force:org:open -r
    fi
  fi

  # Delete scratch org
  if [ "$delete_scratch_org" == "true" ]; then
    sfdx force:org:delete -p
  fi
fi

# Create a bin directory
mkdir -p $BUILD_DIR/bin

# Setup tests for Heroku CI
if [ "$run_apex_tests" == "true" ];
then

  if [ ! -f $BUILD_DIR/bin/test-setup.sh ]; then
    log "Creating $BUILD_DIR/bin/test-setup.sh ..."
    echo "sfdx force:org:display -u targetorg" > $BUILD_DIR/bin/test-setup.sh
  fi

  if [ ! -f $BUILD_DIR/bin/test.sh ]; then
    log "Creating $BUILD_DIR/bin/test.sh ..."
    echo "sfdx force:apex:test:run -r tap -u targetorg" > $BUILD_DIR/bin/test.sh
  fi

else
  log "Creating $BUILD_DIR/bin/test-setup.sh ..."
  echo "echo 'run-apex-tests set to false in .salesforcedx.yml'" > $BUILD_DIR/bin/test-setup.sh

  log "Creating $BUILD_DIR/bin/test.sh ..."
  echo "echo 'run-apex-tests set to false in .salesforcedx.yml'" > $BUILD_DIR/bin/test.sh
fi

### Procfile & Release Phase

# if no Procfile, create one
if [ ! -f $BUILD_DIR/Procfile ]; then
  log "Creating Procfile ..."
  echo "# Deploy source to production org.
release: ./release.sh" > $BUILD_DIR/Procfile

  debug "Generated Procfile that will deploy source in release phase and redirect to open-path in web phase"
fi

# copy scripts needed for release phase
log "Copying files for release phase ..."

debug "release.sh to $BUILD_DIR/release.sh"
cp $BP_DIR/lib/release.sh $BUILD_DIR/
debug "common.sh to $BUILD_DIR/common.sh"
cp $BP_DIR/lib/common.sh $BUILD_DIR/
debug "sfdx.sh to $BUILD_DIR/sfdx.sh"
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/
debug "stdlib.sh to $BUILD_DIR/stdlib.sh"
cp $BP_DIR/lib/stdlib.sh $BUILD_DIR/

# TODO: can we be smart and delete or replace .profile during the appropriate
# stage so that the release phase is faster?

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0