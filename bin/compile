#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# set defaults for optional config vars
: ${SFDX_BUILDPACK_DEBUG:="false"}

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source $BP_DIR/lib/stdlib.sh

### Execute
header 'Welcome to salesforce-dx-buildpack!'
log "Exporting environment directories ..."
export_env "$ENV_DIR"

# Setup local paths
log "Setting up paths ..."

debug "BUILD_DIR: $BUILD_DIR"
debug "CACHE_DIR: $CACHE_DIR"
debug "ENV_DIR: $ENV_DIR" 
debug "BP_DIR: $BP_DIR"

setup_dirs "$BUILD_DIR"

# CLI details
SFDX_VERSION=$(sfdx version)
debug "sfdx version: $SFDX_VERSION"
SFDX_PLUGINS=$(sfdx plugins --core)
debug "Plugins: $SFDX_PLUGINS"

# Log config
debug "DEV_HUB_SFDX_AUTH_URL: $DEV_HUB_SFDX_AUTH_URL"
debug "STAGE: $STAGE"
debug "SFDX_AUTH_URL: $SFDX_AUTH_URL"
debug "SFDX_BUILDPACK_DEBUG: $SFDX_BUILDPACK_DEBUG"
debug "CI: $CI"
debug "HEROKU_TEST_RUN_BRANCH: $HEROKU_TEST_RUN_BRANCH"
debug "HEROKU_TEST_RUN_COMMIT_VERSION: $HEROKU_TEST_RUN_COMMIT_VERSION"
debug "HEROKU_TEST_RUN_ID: $HEROKU_TEST_RUN_ID"
debug "STACK: $STACK"
debug "SOURCE_VERSION: $SOURCE_VERSION"

# Set target org alias
TARGET_ORG_ALIAS="ra$SOURCE_VERSION"
TARGET_ORG_NAME="\"Pipeline Review App: $SOURCE_VERSION\""

if [ "$CI" == "true" ]; then
  # CI doesn't include SOURCE_VERSION, so set it to a default value
  TARGET_ORG_ALIAS="ci$HEROKU_TEST_RUN_COMMIT_VERSION"
  TARGET_ORG_NAME="\"Pipeline CI: $HEROKU_TEST_RUN_BRANCH $HEROKU_TEST_RUN_COMMIT_VERSION\""
fi

debug "TARGET_ORG_ALIAS: $TARGET_ORG_ALIAS"
debug "TARGET_ORG_NAME: $TARGET_ORG_NAME"

whoami=$(whoami)
debug "WHOAMI: $whoami"

# Create a bin and vendor directory
mkdir -p $BUILD_DIR/bin

vendorDir="vendor/sfdx"
mkdir -p $BUILD_DIR/$vendorDir

# Go to BUILD_DIR
cd $BUILD_DIR

log "Parse .salesforcex.yml values ..."

# Parse .salesforcedx.yml file into env
#BUG: not parsing arrays properly
eval $(parse_yaml .salesforcedx.yml)

debug "scratch-org-def: $scratch_org_def"
debug "assign-permset: $assign_permset"
debug "permset-name: $permset_name"
debug "run-apex-tests: $run_apex_tests"
debug "apex-test-format: $apex_test_format"
debug "delete-scratch-org: $delete_scratch_org"
debug "show-scratch-org-url: $show_scratch_org_url"
debug "open-path: $open_path"
debug "data-plans: $data_plans"

### Review app

if [ "$STAGE" == "" ]; then

  log "Running as a REVIEW APP ..."

  if [ ! "$CI" == "" ]; then
    log "Running via CI ..."
  fi

  # Authenticate to Dev Hub
  auth "$BUILD_DIR/$vendorDir/sfdxurl" "$DEV_HUB_SFDX_AUTH_URL" d huborg

  # Create scratch org
  sfdx force:org:create -s -f "$scratch_org_def" -a "$TARGET_ORG_ALIAS" orgName="$TARGET_ORG_NAME"

  # Store creds for scratch org
  scratchSfdxAuthUrl=$(sfdx force:org:display --verbose -u $TARGET_ORG_ALIAS --json | jq -r .result.sfdxAuthUrl)
  debug "scratchSfdxAuthUrl: $scratchSfdxAuthUrl"
  
  # Store creds in file reflecting the source version (if not running CI)
  echo "$scratchSfdxAuthUrl" > $BUILD_DIR/$vendorDir/$TARGET_ORG_ALIAS
  debug "stored in file: $BUILD_DIR/$vendorDir/$TARGET_ORG_ALIAS"
  
fi

### Setup tests for Heroku CI

if [ "$run_apex_tests" == "true" ];
then

  if [ ! -f $BUILD_DIR/bin/test-setup.sh ]; then
    log "Creating $BUILD_DIR/bin/test-setup.sh ..."
    echo "sfdx force:org:display -u $TARGET_ORG_ALIAS" > $BUILD_DIR/bin/test-setup.sh
    chmod +x $BUILD_DIR/bin/test-setup.sh
  fi

  if [ ! -f $BUILD_DIR/bin/test.sh ]; then
    log "Creating $BUILD_DIR/bin/test.sh ..."
    echo "sfdx force:apex:test:run -r tap -u $TARGET_ORG_ALIAS" > $BUILD_DIR/bin/test.sh
    chmod +x $BUILD_DIR/bin/test.sh
  fi

else
  log "Creating $BUILD_DIR/bin/test-setup.sh ..."
  echo "echo 'run-apex-tests set to false in .salesforcedx.yml'" > $BUILD_DIR/bin/test-setup.sh

  log "Creating $BUILD_DIR/bin/test.sh ..."
  echo "echo 'run-apex-tests set to false in .salesforcedx.yml'" > $BUILD_DIR/bin/test.sh
fi

### Procfile & Release Phase

# if no Procfile, create one
if [ ! -f $BUILD_DIR/Procfile ]; then
  log "Creating Procfile ..."
  echo "# Deploy source to production org.
release: ./"$vendorDir"/release.sh \"$TARGET_ORG_ALIAS\"" > $BUILD_DIR/Procfile

  debug "Generated Procfile that will deploy source in release phase and redirect to open-path in web phase"
fi

# copy scripts needed for release phase
log "Copying files for release phase ..."

debug "release.sh to $BUILD_DIR/release.sh"
cp $BP_DIR/lib/release.sh $BUILD_DIR/"$vendorDir"/
debug "common.sh to $BUILD_DIR/common.sh"
cp $BP_DIR/lib/common.sh $BUILD_DIR/"$vendorDir"/
debug "sfdx.sh to $BUILD_DIR/sfdx.sh"
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/"$vendorDir"/
debug "stdlib.sh to $BUILD_DIR/stdlib.sh"
cp $BP_DIR/lib/stdlib.sh $BUILD_DIR/"$vendorDir"/

# TODO: can we be smart and delete or replace .profile during the appropriate
# stage so that the release phase is faster?

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0